import React, { useState, useEffect, useRef } from 'react';
import { useDrag } from '../contexts/DragContext';

const Card = ({ item, onClick, onDragStart, onDragEnd, isDragging, sliderId, onQuickMove }) => {
  const [imgError, setImgError] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const dropdownRef = useRef(null);
  const { startDrag } = useDrag();

  // Dropdown dÄ±ÅŸÄ±na tÄ±klandÄ±ÄŸÄ±nda kapat
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowDropdown(false);
      }
    };

    if (showDropdown) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showDropdown]);

  // Yeni veri yapÄ±sÄ±na gÃ¶re field mapping
  const poster = item.poster || item.imageUrl || (item.apiData?.poster);
  const title = item.title || (item.apiData?.title);
  const genres = item.genres || item.genre || (item.apiData?.genres) || [];
  const releaseDate = item.releaseDate || item.year || (item.apiData?.releaseDate);
  const rating = item.rating || item.score || (item.apiData?.rating || item.apiData?.score);

  const showImage = poster && !imgError;

  const handleDragStart = (e) => {
    if (onDragStart) {
      // Ä°lk olarak dataTransfer'i ayarla (bu sÄ±rada preventDefault yapmadan)
      e.dataTransfer.setData('text/plain', JSON.stringify({
        item,
        sourceSlider: sliderId
      }));
      e.dataTransfer.effectAllowed = 'move';
      
      // Layout thrashing'i Ã¶nlemek iÃ§in global state deÄŸiÅŸikliÄŸini bir sonraki animasyon frame'ine ertele
      // Bu sayede layout deÄŸiÅŸiminden kaynaklÄ± scroll jump'Ä± minimize edilebilir
      requestAnimationFrame(() => {
        startDrag(item, sliderId); // Global drag state'i baÅŸlat - sliderId'yi de gÃ¶nder
      });
      
      onDragStart(item, sliderId);
    }
  };

  const handleDragEnd = () => {
    // Do not end global drag here â€” let drop handler on target finalize and clear state.
    if (onDragEnd) {
      onDragEnd();
    }
  };

  return (
    <div
      className={`legacy-card group ${isDragging ? 'dragging' : ''}`}
      onClick={() => onClick && onClick(item)}
      tabIndex={0}
      role="button"
      onKeyDown={e => {
        if ((e.key === 'Enter' || e.key === ' ') && onClick) {
          e.preventDefault();
          onClick(item);
        }
      }}
      draggable
      onDragStart={handleDragStart}
      onDragEnd={handleDragEnd}
      title="ðŸ”„ KartÄ± sÃ¼rÃ¼kleyerek baÅŸka slider'a taÅŸÄ±yabilirsiniz"
    >
      {/* Image Container - Full Height */}
      <div className="relative w-full h-full overflow-hidden">
        {showImage ? (
          <>
            <img
              src={poster}
              alt={title}
              className="w-full h-full object-cover transition-transform duration-200 group-hover:scale-102"
              onError={() => setImgError(true)}
              draggable={false}
            />
            
            {/* Gradient Overlay for Text Readability */}
            <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-black/10"></div>
            
            {/* Rating Badge */}
            {rating && (
              <div className="legacy-card-rating">
                <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 24 24" style={{ color: 'var(--accent)' }} role="img" aria-label="Derecelendirme" focusable="false">
                  <title>Derecelendirme</title>
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
                <span className="text-xs font-medium text-white">{Number(rating).toFixed(1)}</span>
              </div>
            )}

            {/* Quick Move Button */}
            <div className="legacy-card-quick-move" ref={dropdownRef}>
              <button
                onClick={(e) => {
                  e.stopPropagation();
                  setShowDropdown(!showDropdown);
                }}
                className="legacy-card-quick-move-btn"
                title="HÄ±zlÄ± taÅŸÄ±"
              >
                <svg className="legacy-card-quick-move-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                </svg>
              </button>

              {/* Dropdown Menu */}
              {showDropdown && onQuickMove && (
                <div className="legacy-card-dropdown">
                  {onQuickMove.availableSliders?.map((slider) => (
                    <button
                      key={slider.id}
                      onClick={(e) => {
                        e.stopPropagation();
                        onQuickMove.handler(item, sliderId, slider.id);
                        setShowDropdown(false);
                      }}
                      className="w-full text-left px-3 py-2 text-sm text-white hover:bg-neutral-700 transition-colors"
                    >
                      {slider.title}
                    </button>
                  ))}
                </div>
              )}
            </div>

            {/* Content Overlay - Bottom */}
            <div className="absolute bottom-0 left-0 right-0 p-2.5">
              <h2 className="text-white text-base font-semibold line-clamp-2 mb-0.5">
                {title || 'BaÅŸlÄ±k Yok'}
              </h2>
              <div className="flex items-center justify-between gap-1">
                {releaseDate && (
                  <span className="text-xs text-gray-400 drop-shadow-md">{releaseDate}</span>
                )}
                {genres.length > 0 && (
                  <span className="text-xs text-gray-500 bg-black/30 px-2 py-0.5 rounded-full backdrop-blur-sm">
                    {genres[0]}
                  </span>
                )}
              </div>
            </div>

            {/* Drag Indicator */}
            {isDragging && (
              <div className="legacy-card-drag-indicator">
                <div className="legacy-card-drag-text">
                  TaÅŸÄ±nÄ±yor...
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="legacy-card-no-image">
            <div className="legacy-card-no-image-content">
              <svg className="legacy-card-no-image-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" role="img" aria-label="Poster Yok" focusable="false">
                <title>Poster Yok</title>
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p className="legacy-card-no-image-text">Poster Yok</p>
            </div>
            {/* Content for No Image */}
            <div className="legacy-card-no-image-meta-wrapper">
              <h2 className="legacy-card-no-image-title">
                {title || 'BaÅŸlÄ±k Yok'}
              </h2>
              <div className="legacy-card-no-image-meta">
                {releaseDate && (
                  <span className="legacy-card-no-image-date">{releaseDate}</span>
                )}
                {genres.length > 0 && (
                  <span className="legacy-card-no-image-genre">
                    {genres[0]}
                  </span>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Card;